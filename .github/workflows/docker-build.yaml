name: Docker Build

on:
  workflow_call:
    inputs:
      dockerfile:
        required: true
        type: string
      context:
        required: true
        type: string
      image-name:
        required: true
        type: string
      build-args:
        required: false
        type: string
jobs:
  build:
    name: Build Images
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
      - name: Login to Docker Container Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: https://registry.hub.docker.com
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Extract ticket number
        id: extract
        if: github.ref_name != 'main'
        run: |
          echo "PROJECT_INITIAL=$(echo ${{github.ref_name}} |  cut -d'-' -f1 | tr '[:upper:]' '[:lower:]' )" >> $GITHUB_OUTPUT
          echo "TICKET_NUMBER=$(echo ${{github.ref_name}} | cut -d'-' -f2)" >> $GITHUB_OUTPUT
          # - name: Set tag prefix
      - name: Get base registry
        run: |
          echo "REGISTRY="

      #   if: github.ref_name == 'main'
      #   run: |
      #     echo "TAG=${{steps.extract.outputs.PROJECT_INITIAL}}-${{steps.extract.outputs.TICKET_NUMBER}}" >> $GITHUB_ENV
      - name : Show tag
        run: |
          echo ${{ steps.extract.outputs.PROJECT_INITIAL }}-${{ steps.extract.outputs.TICKET_NUMBER }}
      - name : Build docker images on local runner
        uses: docker/build-push-action@v3.2.0
        with:
            file: ${{ inputs.dockerfile }}
            context: ${{ inputs.context }}
            build-args: ${{ inputs.build-args }}
            push: false
            load: true
            tags: "${{ steps.extract.outputs.PROJECT_INITIAL }}-${{ steps.extract.outputs.TICKET_NUMBER }}"
            # labels: ${{ steps.meta.outputs.labels }}
            # cache-from: type=gha
            # cache-to: type=gha,mode=max